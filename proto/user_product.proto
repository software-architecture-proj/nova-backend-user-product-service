syntax = "proto3"

option go_package = "module github.com/software-architecture-proj/nova-backend-user-product-service/proto"; // Go package for generated code

package user_product; // Protobuf package name

// -----------------------------------------------------------------------------
// Service Definition: UserProductService
// This service handles user profiles, banking products, and customer accounts.
// -----------------------------------------------------------------------------

// @Trigger: I think we can do all methods here, as doing separate services
// for pockets, countrycode and verification seems unnecessary to me.
service UserService {
  // User Management
  rpc CreateUser(CreateUserRequest) returns (User) {}
  rpc GetUserByID(GetUserByIDRequest) returns (User) {}
  rpc UpdateUserProfile(UpdateUserProfileRequest) returns (User) {}
}



// -----------------------------------------------------------------------------
// Messages: Data Structures
// -----------------------------------------------------------------------------

// Country code data structure
message CountryCode {
    string id = 1;
    string name = 2;
    string code = 3;
}

// Favorite data structure
message Favorite {
    string id = 1;
    string user_id = 2;
    string favorite_user_id = 3;
    string alias = 4;
}

// Pocket data structure
message Pocket {
    string id = 1;
    string user_id = 2;
    string name = 3;
    string category = 4;
    int32 max_amount = 5;
}

// Verification data structure
message Verification {
    string id = 1;
    string user_id = 2;
    string type = 3;
    string status = 4;
}

// User data structure
message User {
    string id = 1;
    string email = 2;
    string username = 3;
    string phone = 4;
    string first_name = 5;
    string last_name = 6;
    string birthdate = 7;

    repeated Favorite favorites = 8;
    repeated Pocket pockets = 9;
    Verification verification = 10;
}

// -----------------------------------------------------------------------------
// Messages: Requests and Responses
// -----------------------------------------------------------------------------

// @Trigger: This is like the standard way to treat requests and responses.

message CreatePocketRequest {
    string user_id = 1;
    string name = 2;
    string category = 3;
    int32 max_amount = 4;
}

message GetPocketByIDRequest {
    string id = 1;
}

// @Trigger: requests above and responses above, to separate them better.

message GetPocketsByUserIDResponse {
    repeated Pocket pockets = 1;
}


